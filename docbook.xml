<?xml version="1.0" encoding="UTF-8"?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Blizzard Community Platform API Documentation</title>

    <author>
      <orgname>Blizzard Entertainment</orgname>

      <email>api-support@blizzard.com</email>
    </author>

    <pubdate>6/10/2011</pubdate>

    <abstract>
      <para>This is the documentation for the RESTful APIs exposed through the
      World of Warcraft community site as a service to the World of Warcraft
      community.</para>
    </abstract>
  </info>

  <chapter>
    <title>Features</title>

    <section>
      <title>Introduction</title>

      <para>The Blizzard Community Platform API provides a number of resources
      for developers and Wow enthusiasts to gather data about their
      characters, guilds and arena teams. This documentation is primarily for
      developers and third parties.</para>

      <para>Blizzard's epic gaming experiences often take place in game, but
      can lead to rewarding and lasting experiences out of game as well.
      Through exposing key sets of data, we can enable the community to create
      extended communities to continue that epic experience.</para>
    </section>

    <section>
      <title>API Features</title>

      <para>The API has a number of features that you, as a developer, should
      be aware of.</para>

      <section>
        <title>Access and Regions</title>

        <para>To access the API, HTTP requests can be made to specific urls
        and resources exposed on the regional battle.net domains.</para>

        <example>
          <title>An example request</title>

          <programlisting>GET /api/wow/realm/status HTTP/1.1
Host: us.battle.net
&lt;http headers&gt;</programlisting>
        </example>

        <example>
          <title>An example response</title>

          <programlisting>HTTP/1.1 200 OK
&lt;http headers&gt;

{"realms":[ ... ]}</programlisting>
        </example>

        <para>The regions where this API is available are:<itemizedlist>
            <listitem>
              <para>us.battle.net</para>
            </listitem>

            <listitem>
              <para>eu.battle.net</para>
            </listitem>

            <listitem>
              <para>kr.battle.net</para>
            </listitem>

            <listitem>
              <para>tw.battle.net</para>
            </listitem>

            <listitem>
              <para>battlenet.com.cn</para>
            </listitem>
          </itemizedlist></para>

        <para>The data available through the API is limited to the region that
        it is in. Hence, US APIs accessed through us.battle.net will only
        contain data within US battlegroups and realms and supports the
        locales of the us.battle.net/wow community site.</para>
      </section>

      <section>
        <title>REST</title>

        <para>The API is <emphasis>mostly</emphasis> restful. Data is exposed
        in the form of URIs that represent resources and can be fetched with
        HTTP clients (like web browsers). At this time, the entirety of the
        API is limited to read-only operations.<remark>I'm not terribly
        pleased with this section. Things we should probably also reference
        include any quirks or behaviors that are un-rest-like.</remark></para>
      </section>

      <section>
        <title>Authentication</title>

        <para>Although most of the application can be accessed without any
        form of authentication, we do support a form application registration
        and authentication. Application authentication involves creating and
        including an application identifier and a request signature and
        including those values with the request headers.</para>

        <para>To send authenticated request you first need to register an
        application.</para>

        <para>Explain the backstory of application identification and
        authentication.</para>

        <para>List and describe the perks of opting into this process.</para>

        <para>Describe the signing process and the changes in how API requests
        are crafted and made.</para>

        <section>
          <title>Application Registration</title>

          <para>To send authenticated request you first need to register an
          application. Because registration isn't automated, we would like to
          limit application registration to those who meet the following
          criteria:</para>

          <itemizedlist>
            <listitem>
              <para>You plan on making requests from one or more IP addresses,
              such as a production environment and development
              environment.</para>
            </listitem>

            <listitem>
              <para>You can justify making more than 2,000 requests per day
              from one or more IP addresses.</para>
            </listitem>

            <listitem>
              <para>You operate a fansite and want to ensure that requests to
              the API come from a specified set of IP addresses for security
              purposes.</para>
            </listitem>
          </itemizedlist>

          <para>Registering an application is a matter of sending information
          about your application, how you plan on using the API and your
          contact information to api-support@blizzard.com with the subject
          "Application Registration Request".</para>
        </section>

        <section>
          <title>Authentication Process</title>

          <para>To authentice a request, simple include the "Authorization"
          header with your application identifier and the request
          signature.</para>

          <example>
            <title>An example authenticated request</title>

            <programlisting>GET /api/wow/character/Medivh/Thrall HTTP/1.1
Host: us.battle.net
Date: Fri, 10 Jun 2011 20:59:24 GMT
Authorization: <computeroutput>BNET</computeroutput> <computeroutput>c1fbf21b79c03191d</computeroutput>:<computeroutput>+3fE0RaKc+PqxN0gi8va5GQC35A=</computeroutput></programlisting>
          </example>

          <para>In the above exmple, the value of the Authorization header has
          three parts "BNET", "c1fbf21b79c03191d" and
          "+3fE0RaKc+PqxN0gi8va5GQC35A=". The first part is a processing
          directive for the Authorization header. The second and third values
          are the application public key and the request signature. The
          application public key is assigned by Blizzard during the
          application registration process. The signature is generated with
          each request and is discribed as such:</para>

          <programlisting>Authorization = "BNET" + " " + PublicKey + ":" + Signature;

Signature = Base64( HMAC-SHA1( UTF-8-Encoding-Of( PrivateKey, StringToSign ) ) );

StringToSign = HTTP-Verb + "\n" +
Date + "\n" +
UrlPath + "\n";

UrlPath = &lt;HTTP-Request-URI, from the port to the query string&gt;</programlisting>

          <para>The above process can be seen in action by filling in the
          blanks:</para>

          <programlisting>Authorization = "BNET" + " " + "examplekey" + ":" + Signature;

Signature = Base64( HMAC-SHA1( UTF-8-Encoding-Of( "examplesecret", StringToSign ) ) );

StringToSign = "GET" + "\n" +
"Fri, 10 Jun 2011 21:37:34 GMT" + "\n" +
UrlPath + "\n";

UrlPath = "/api/wow/realm/status"</programlisting>
        </section>
      </section>

      <section>
        <title>Formats and Protocols</title>

        <para>At this point, the only format that data is provided is
        JSON.</para>
      </section>
    </section>
  </chapter>

  <chapter>
    <title>APIs</title>

    <section>
      <title>Characters</title>

      <para>Character APIs currently provide character profile
      information.</para>

      <section>
        <title>Profile API</title>

        <para>The character profile API is the primary way to access character
        information. This character profile API can be used to fetch a single
        character at a time through an HTTP GET request to a url describing
        the character profile resource. By default, a basic dataset will be
        returned and with each request, zero or more additional fields can be
        retrieved. To access this API, craft a resource URL pointing to the
        character whos information is to be retrieved.</para>

        <programlisting>URL = "/api/wow/character/" + Realm + "/" + CharacterName

Realm = &lt;proper realm name&gt; | &lt;normalized realm name&gt;</programlisting>

        <para>There are no required query string parameters when accessing
        this resource, although the fields query string parameter can
        optionally be passed to indicate that one or more of the optional
        datasets is to be retrieved. Those additional fields are listed in the
        subsection titled "Optional Fields".</para>

        <example>
          <title>Example request</title>

          <programlisting>GET /api/wow/character/Medivh/Uther
Host: us.battle.net</programlisting>
        </example>

        <example>
          <title>Example response</title>

          <programlisting>HTTP/1.1 200 OK
&lt;http headers&gt;

{'realm': 'Medivh', 'name': 'Uther', 'level': 85, 'lastModified': 1307596000000, 'thumbnail': 'medivh/1/1-avatar.jpg',
'race': 1, 'achievementPoints': 9745, 'gender': 0, 'class': 2}</programlisting>
        </example>

        <para>The core dataset returned includes the character's realm, name,
        level, last modified timestamp, thumbnail, race id, achievement points
        value, gender id and class id.</para>

        <section>
          <title>Optional Fields</title>

          <para>This section contains a list of the optional fields that can
          be requested.</para>

          <variablelist>
            <varlistentry>
              <term>guild</term>

              <listitem>
                <para>A summary of the guild that the character belongs to. If
                the character does not belong to a guild and this field is
                requested, this field will not be exposed.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>stats</term>

              <listitem>
                <para>A map of character attributes and stats.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>talents</term>

              <listitem>
                <para>A list of talent structures.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>items</term>

              <listitem>
                <para>A list of items equipted by the character. Use of this
                field will also include the <emphasis>average item
                level</emphasis> and <emphasis>average item level
                equipped</emphasis> for the character.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>reputation</term>

              <listitem>
                <para>A list of the factions that the character has an
                associated reputation with.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>titles</term>

              <listitem>
                <para>A list of the titles obtained by the character.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>professions</term>

              <listitem>
                <para>A list of the character's professions. It is important
                to note that when this information is retrieved, it will also
                include the known recipes of each of the listed
                professions.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>appearance</term>

              <listitem>
                <para>A map of values that describes the face, features and
                helm/cloak display preferences and attributes.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>companions</term>

              <listitem>
                <para>A list of all of the non-combat pets obtained by the
                character.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>mounts</term>

              <listitem>
                <para>A list of all of the mounts obtained by the
                character.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>pets</term>

              <listitem>
                <para>A list of all of the combat pets obtained by the
                character. At this point, we are not exposing pet talent
                information.</para>
              </listitem>
            </varlistentry>
          </variablelist>

          <section>
            <title>guild</title>

            <para>When a guild is requested, a map is returned with key/value
            pairs that describe a basic set of guild information.</para>

            <example>
              <title>An example guild on Medivh</title>

              <screen>{
  "guild":{
    "name":"Roll the Dice",
    "realm":"Medivh",
    "level":25,
    "members":177,
    "achievementPoints":790,
    "emblem":{
      "icon":119,
      "iconColor":"ffffffb1",
      "border":-1,
      "borderColor":"ffffffff",
      "backgroundColor":"ffffff91"
    }
  }
}</screen>
            </example>
          </section>

          <section>
            <title>items</title>

            <para>When the items field is used, a map structure is returned
            that contains information on the equipped items of that character
            as well as the average item level of the character.</para>

            <example>
              <title>An example items field</title>

              <screen><xi:include href="items.json" parse="text" /></screen>
            </example>

            <para>It is important to note the use of ids when identifying the
            item and the item attributes and subcomponents, like gems and
            enchantments.</para>
          </section>

          <section>
            <title>stats</title>

            <para><remark>NKG: Fill in an caveats or quirks in accessing
            stats. Mention lack of base stat.</remark></para>

            <example>
              <title>An example stats field</title>

              <screen><xi:include href="stats.json" parse="text" /></screen>
            </example>
          </section>

          <section>
            <title>talents</title>

            <para><remark>NKG: Make note of known glyphs not being
            listed.</remark></para>

            <example>
              <title>An example talents field</title>

              <screen><xi:include href="talents.json" parse="text" /></screen>
            </example>
          </section>

          <section>
            <title>reputation</title>

            <para><remark>NKG: Note that the following example was shortened
            because this list can be quite long.</remark></para>

            <example>
              <title>An example reputation field</title>

              <screen><xi:include href="reputation.json" parse="text" /></screen>
            </example>
          </section>

          <section>
            <title>titles</title>

            <para></para>

            <example>
              <title>An example titles field</title>

              <screen><xi:include href="titles.json" parse="text" /></screen>
            </example>
          </section>

          <section>
            <title>professions</title>

            <para><remark>NKG: Note that archaeology is still being worked on
            and some data for it will be missing.</remark></para>

            <example>
              <title>An example professions field</title>

              <screen><xi:include href="professions.json" parse="text" /></screen>
            </example>
          </section>

          <section>
            <title>appearance</title>

            <para></para>

            <example>
              <title>An example appearance field</title>

              <screen>{
  "appearance":{
    "faceVariation":2,
    "skinColor":0,
    "hairVariation":1,
    "hairColor":8,
    "featureVariation":2,
    "showHelm":true,
    "showCloak":true
  }
}</screen>
            </example>
          </section>

          <section>
            <title>companions</title>

            <para></para>

            <example>
              <title>An example companions field</title>

              <screen>{
  "companions":[
    4055,
    10673,
    10674,
    10676,
    10677
  ]
}</screen>
            </example>
          </section>

          <section>
            <title>mounts</title>

            <para></para>

            <example>
              <title>An example mounts field</title>

              <screen>{
  "mounts":[
    30174
  ]
}</screen>
            </example>
          </section>

          <section>
            <title>pets</title>

            <para></para>

            <example>
              <title>An example pets field</title>

              <screen>{
  "pets":[
    {
      "name":"Wolf",
      "creature":17280,
      "selected":true,
      "slot":0
    },
    {
      "name":"Bear",
      "creature":29319,
      "slot":8
    },
    {
      "name":"Kat",
      "creature":28404,
      "slot":7
    },
    {
      "name":"Cat",
      "creature":2071,
      "slot":6
    }
  ]
}</screen>
            </example>
          </section>
        </section>
      </section>
    </section>

    <section>
      <title>Guilds</title>

      <para>Guild APIs currently provide guild profile information.</para>

      <section>
        <title>Profile API</title>

        <para>The guild profile API is the primary way to access guild
        information. This guild profile API can be used to fetch a single
        guild at a time through an HTTP GET request to a url describing the
        guild profile resource. By default, a basic dataset will be returned
        and with each request, zero or more additional fields can be
        retrieved. To access this API, craft a resource URL pointing to the
        character whos information is to be retrieved.</para>

        <programlisting>URL = "/api/wow/guild/" + Realm + "/" + GuildName

Realm = &lt;proper realm name&gt; | &lt;normalized realm name&gt;</programlisting>

        <para>There are no required query string parameters when accessing
        this resource, although the fields query string parameter can
        optionally be passed to indicate that one or more of the optional
        datasets is to be retrieved. Those additional fields are listed in the
        subsection titled "Optional Fields".</para>

        <example>
          <title>Example request</title>

          <programlisting>GET /api/wow/guild/Medivh/Roll the Dice
Host: us.battle.net</programlisting>
        </example>

        <example>
          <title>Example response</title>

          <programlisting>HTTP/1.1 200 OK
&lt;http headers&gt;

{ "name":"Roll the Dice", "level":25, "side":"alliance", "achievementPoints":800 }</programlisting>
        </example>

        <para>The core dataset returned includes the guild's name, level,
        faction and achievement points.</para>

        <section>
          <title>Optional Fields</title>

          <para>This section contains a list of the optional fields that can
          be requested.</para>

          <variablelist>
            <varlistentry>
              <term>members</term>

              <listitem>
                <para>A list of characters that are a member of the
                guild</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>achievements</term>

              <listitem>
                <para>A set of data structures that describe the achievements
                earned by the guild.</para>
              </listitem>
            </varlistentry>
          </variablelist>

          <section>
            <title>members</title>

            <para>When the members list is requrested, a list of character
            objects is returned. Each object in the returned members list
            contains a character block as well as a rank field.</para>

            <example>
              <title>An example members block</title>

              <screen><xi:include href="guild-members.json" parse="text" /></screen>
            </example>
          </section>

          <section>
            <title>achievements</title>

            <para>When requesting achievement data, several sets of data will
            be returned.</para>

            <variablelist>
              <varlistentry>
                <term>achievementsCompleted</term>

                <listitem>
                  <para>A list of achievement ids.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>achievementsCompletedTimestamp</term>

                <listitem>
                  <para>A list of timestamps whose places corrospond to the
                  achievement ids in the "achievementsCompleted" list. The
                  value of each timestamp indicates when the related
                  achievement was earned by the guild.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>criteria</term>

                <listitem>
                  <para>A list of criteria ids that can be used to determine
                  the partial completedness of guild achievements.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>criteriaQuantity</term>

                <listitem>
                  <para>A list of values associated with a given achievement
                  criteria. The position of a value corrosponds to the
                  position of a given achivement criteria.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>criteriaTimestamp</term>

                <listitem>
                  <para>A list of timestamps where the value represents when
                  the criteria was considered complete. The position of a
                  value corrosponds to the position of a given achivement
                  criteria.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>criteriaCreated</term>

                <listitem>
                  <para>A list of timestamps where the value represents when
                  the criteria was considered started. The position of a value
                  corrosponds to the position of a given achivement
                  criteria.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <example>
              <title>An example achievements block</title>

              <programlisting><xi:include href="guild-achievements.json"
                  parse="text" /></programlisting>
            </example>
          </section>
        </section>
      </section>
    </section>

    <section>
      <title>Realms</title>

      <para>Realm APIs currently provide realm status information.</para>

      <section>
        <title>Realm Status</title>

        <para>The realm status API allows developers to retrieve realm status
        information. This information is limited to whether or not the realm
        is up, the type and state of the realm and the current
        population.</para>

        <programlisting>URL = "/api/wow/realm/status"</programlisting>

        <para>There are no required query string parameters when accessing
        this resource, although the realms query string parameter can
        optionally be passed to limit the realms returned to one or
        more.</para>

        <example>
          <title>An example request and response</title>

          <screen>GET /api/wow/realm/status?realms=Medivh,Lightbringer HTTP/1.1
Host: us.battle.net
&lt;http headers&gt;</screen>

          <screen>HTTP/1.1 200 OK
&lt;http headers&gt;

{
  "realms":[
    {
      "type":"pve",
      "queue":false,
      "status":true,
      "population":"high",
      "name":"Lightbringer",
      "slug":"lightbringer"
    },
    {
      "type":"pve",
      "queue":false,
      "status":true,
      "population":"medium",
      "name":"Medivh",
      "slug":"medivh"
    }
  ]
}</screen>
        </example>
      </section>
    </section>

    <section>
      <title>Static Data</title>

      <para>The static data APIs provide information that can compliment
      profile information to provide structure or definition to the data
      provided.</para>

      <section>
        <title>Character Races</title>

        <para>The character races data API provides a list of character
        races.</para>
      </section>

      <section>
        <title>Character Classes</title>

        <para>The character classes data API provides a list of character
        classes.</para>
      </section>

      <section>
        <title>Guild Rewards</title>

        <para>The guild rewards data API provides a list of all guild
        rewards.</para>
      </section>

      <section>
        <title>Guild Perks</title>

        <para>The guild perks data API provides a list of all guild
        perks.</para>
      </section>
    </section>
  </chapter>

  <chapter>
    <title>Policies and Best Practices</title>

    <para>This chapter will outline API policies and best practices when
    interacting with the API.</para>

    <section>
      <title>Caching</title>

      <para>Caching policies should be used by client developers and API
      consumers.</para>

      <para>Provide some example caching timelines for the documented
      resources.</para>

      <remark>NKG: Developers are encouraged to use a 2 week cache window
      unless user activity indicates that data needs to be refreshed.</remark>
    </section>

    <section>
      <title>Throttling</title>

      <para>Throttling is something that is important to healthy communities.
      In a perfect world, there would be no throttles or limitations of how
      much data could be fetched and how often, but unfortunately we don't
      live in such a world. Programs have bugs, hackers launch denial of
      service attacks and servers can generally become overwhelmed with
      requests. We've put a lot of thought into request and access patterns
      and have a throttling model that helps support the bursty traffic
      patterns that developers often have to deal with.</para>

      <para>The throttling limits are pretty straightforward and easy to
      handle. As an anonymous application you can make up to 3,000 requests
      per day without being throttled. This basically means that if you've got
      a website on a single machine, you can make up to 3,000 requests from
      midnight to midnight without your requests being denied. Once you hit
      that ceiling, any further requests will be denied and you should
      failoever to stale data or queuing requests for the next day. Registered
      applications, as described in the first chapter of this documentation,
      are afforded a larger number of requests.</para>

      <remark>NKG: Fill in example error response</remark>
    </section>

    <section>
      <title>Support</title>

      <para>Use the forums for your questions and feedback.</para>

      <para>You can also email api-support@blizzard.com for matters that you
      may not want public discussion of</para>
    </section>
  </chapter>

  <article>
    <title>API Changes</title>

    <revhistory>
      <revision>
        <date>2011-06-2011</date>

        <revdescription>
          <para>Initial draft</para>
        </revdescription>
      </revision>
    </revhistory>
  </article>
</book>
